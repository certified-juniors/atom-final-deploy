# Нова-Терра разделена на 5 колоний:
# • Акварион aquarion AQUARION
# • Зеленый Лабиринт greenlab GREENLAB
# • Терраморф terramorf TERRAMORF
# • Кристаллия crystalia CRYSTALIA
# • Пустынный Вихрь dustwind DUSTWIND
volumes:
  backend-db:
  backend-redis:

  aquarion-db:
  greenlab-db:
  terramorf-db:
  crystalia-db:
  dustwind-db:

  aquarion-minio:
  greenlab-minio:
  terramorf-minio:
  crystalia-minio:
  dustwind-minio:

  auth-db:
  auth-redis:
services:
  ###### COLONIAs ######
  ### KAFKAs ###
  zookeeper-aquarion:
    image: confluentinc/cp-zookeeper:latest
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  zookeeper-greenlab:
    image: confluentinc/cp-zookeeper:latest
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  zookeeper-terramorf:
    image: confluentinc/cp-zookeeper:latest
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  zookeeper-crystalia:
    image: confluentinc/cp-zookeeper:latest
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  zookeeper-dustwind:
    image: confluentinc/cp-zookeeper:latest
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  kafka-aquarion:
    image: confluentinc/cp-kafka:latest
    restart: always
    ports:
      - "9092:9092"
    hostname: kafka-aquarion
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka-aquarion:9093,OUTSIDE://${HOST_IP}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-aquarion:2181
  kafka-greenlab:
    image: confluentinc/cp-kafka:latest
    restart: always
    hostname: kafka-greenlab
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka-greenlab:9093,OUTSIDE://${HOST_IP}:9097
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9097
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-greenlab:2181
  kafka-terramorf:
    image: confluentinc/cp-kafka:latest
    restart: always
    hostname: kafka-terramorf
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka-terramorf:9093,OUTSIDE://${HOST_IP}:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-terramorf:2181
  kafka-crystalia:
    image: confluentinc/cp-kafka:latest
    restart: always
    hostname: kafka-crystalia
    ports:
      - "9095:9095"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka-crystalia:9093,OUTSIDE://${HOST_IP}:9095
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9095
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-crystalia:2181
  kafka-dustwind:
    image: confluentinc/cp-kafka:latest
    restart: always
    hostname: kafka-dustwind
    ports:
      - "9096:9096"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka-dustwind:9093,OUTSIDE://${HOST_IP}:9096
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9096
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-dustwind:2181
  ### POSTGRESes ###
  postgres-aquarion:
    image: postgres:16-alpine
    restart: always
    ports: 
      - "5432:5432"
    environment:
      - POSTGRES_USER=${AQUARION_POSTGRES_USER}
      - POSTGRES_PASSWORD=${AQUARION_POSTGRES_PASSWORD}
      - POSTGRES_DB=${AQUARION_POSTGRES_DB}
    volumes:
      - aquarion-db:/var/lib/postgresql/data
  postgres-greenlab:
    image: postgres:16-alpine
    restart: always
    ports: 
      - "5433:5432"
    environment:
      - POSTGRES_USER=${GREENLAB_POSTGRES_USER}
      - POSTGRES_PASSWORD=${GREENLAB_POSTGRES_PASSWORD}
      - POSTGRES_DB=${GREENLAB_POSTGRES_DB}
    volumes:
      - greenlab-db:/var/lib/postgresql/data
  postgres-terramorf:
    image: postgres:16-alpine
    restart: always
    ports: 
      - "5434:5432"
    environment:
      - POSTGRES_USER=${TERRAMORF_POSTGRES_USER}
      - POSTGRES_PASSWORD=${TERRAMORF_POSTGRES_PASSWORD}
      - POSTGRES_DB=${TERRAMORF_POSTGRES_DB}
    volumes:
      - terramorf-db:/var/lib/postgresql/data
  postgres-crystalia:
    image: postgres:16-alpine
    restart: always
    ports: 
      - "5435:5432"
    environment:
      - POSTGRES_USER=${CRYSTALIA_POSTGRES_USER}
      - POSTGRES_PASSWORD=${CRYSTALIA_POSTGRES_PASSWORD}
      - POSTGRES_DB=${CRYSTALIA_POSTGRES_DB}
    volumes:
      - crystalia-db:/var/lib/postgresql/data
  postgres-dustwind:
    image: postgres:16-alpine
    restart: always
    ports: 
      - "5436:5432"
    environment:
      - POSTGRES_USER=${DUSTWIND_POSTGRES_USER}
      - POSTGRES_PASSWORD=${DUSTWIND_POSTGRES_PASSWORD}
      - POSTGRES_DB=${DUSTWIND_POSTGRES_DB}
    volumes:
      - dustwind-db:/var/lib/postgresql/data
  adminer:
    image: adminer:latest
    restart: always
    ports:
      - "33333:8080"
    depends_on:
      - postgres-aquarion
      - postgres-greenlab
      - postgres-terramorf
      - postgres-crystalia
      - postgres-dustwind
      - auth-postgres
  ### MINIOs ###
  minio-aquarion:
    image: quay.io/minio/minio:RELEASE.2023-12-20T01-00-02Z-cpuv1
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - aquarion-minio:/data
    environment:
      - MINIO_ROOT_USER=${AQUARION_MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${AQUARION_MINIO_ROOT_PASSWORD}
    command: server --console-address ":9001" /data
  minio-greenlab:
    image: quay.io/minio/minio:RELEASE.2023-12-20T01-00-02Z-cpuv1
    restart: always
    ports:
      - "9002:9000"
      - "9003:9001"
    volumes:
      - greenlab-minio:/data
    environment:
      - MINIO_ROOT_USER=${GREENLAB_MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${GREENLAB_MINIO_ROOT_PASSWORD}
    command: server --console-address ":9001" /data
  minio-terramorf:
    image: quay.io/minio/minio:RELEASE.2023-12-20T01-00-02Z-cpuv1
    restart: always
    ports:
      - "9004:9000"
      - "9005:9001"
    volumes:
      - terramorf-minio:/data
    environment:
      - MINIO_ROOT_USER=${TERRAMORF_MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${TERRAMORF_MINIO_ROOT_PASSWORD}
    command: server --console-address ":9001" /data
  minio-crystalia:
    image: quay.io/minio/minio:RELEASE.2023-12-20T01-00-02Z-cpuv1
    restart: always
    ports:
      - "9006:9000"
      - "9007:9001"
    volumes:
      - crystalia-minio:/data
    environment:
      - MINIO_ROOT_USER=${CRYSTALIA_MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${CRYSTALIA_MINIO_ROOT_PASSWORD}
    command: server --console-address ":9001" /data
  minio-dustwind:
    image: quay.io/minio/minio:RELEASE.2023-12-20T01-00-02Z-cpuv1
    restart: always
    ports:
      - "9008:9000"
      - "9009:9001"
    volumes:
      - dustwind-minio:/data
    environment:
      - MINIO_ROOT_USER=${DUSTWIND_MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${DUSTWIND_MINIO_ROOT_PASSWORD}
    command: server --console-address ":9001" /data
  createbuckets:
    image: quay.io/minio/mc:RELEASE.2023-12-20T07-14-22Z-cpuv1
    environment:
      - AQUARION_MINIO_ROOT_USER=${AQUARION_MINIO_ROOT_USER}
      - AQUARION_MINIO_ROOT_PASSWORD=${AQUARION_MINIO_ROOT_PASSWORD}
      - AQUARION_MINIO_BUCKET=${AQUARION_MINIO_BUCKET}

      - GREENLAB_MINIO_ROOT_USER=${GREENLAB_MINIO_ROOT_USER}
      - GREENLAB_MINIO_ROOT_PASSWORD=${GREENLAB_MINIO_ROOT_PASSWORD}
      - GREENLAB_MINIO_BUCKET=${GREENLAB_MINIO_BUCKET}

      - TERRAMORF_MINIO_ROOT_USER=${TERRAMORF_MINIO_ROOT_USER}
      - TERRAMORF_MINIO_ROOT_PASSWORD=${TERRAMORF_MINIO_ROOT_PASSWORD}
      - TERRAMORF_MINIO_BUCKET=${TERRAMORF_MINIO_BUCKET}

      - CRYSTALIA_MINIO_ROOT_USER=${CRYSTALIA_MINIO_ROOT_USER}
      - CRYSTALIA_MINIO_ROOT_PASSWORD=${CRYSTALIA_MINIO_ROOT_PASSWORD}
      - CRYSTALIA_MINIO_BUCKET=${CRYSTALIA_MINIO_BUCKET}

      - DUSTWIND_MINIO_ROOT_USER=${DUSTWIND_MINIO_ROOT_USER}
      - DUSTWIND_MINIO_ROOT_PASSWORD=${DUSTWIND_MINIO_ROOT_PASSWORD}
      - DUSTWIND_MINIO_BUCKET=${DUSTWIND_MINIO_BUCKET}
    depends_on:
      - minio-aquarion
      - minio-greenlab
      - minio-terramorf
      - minio-crystalia
      - minio-dustwind
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set aqminio http://minio-aquarion:9000  $AQUARION_MINIO_ROOT_USER  $AQUARION_MINIO_ROOT_PASSWORD;
      /usr/bin/mc alias set glminio http://minio-greenlab:9000  $GREENLAB_MINIO_ROOT_USER  $GREENLAB_MINIO_ROOT_PASSWORD;
      /usr/bin/mc alias set tmminio http://minio-terramorf:9000 $TERRAMORF_MINIO_ROOT_USER $TERRAMORF_MINIO_ROOT_PASSWORD;
      /usr/bin/mc alias set crminio http://minio-crystalia:9000 $CRYSTALIA_MINIO_ROOT_USER $CRYSTALIA_MINIO_ROOT_PASSWORD;
      /usr/bin/mc alias set dwminio http://minio-dustwind:9000  $DUSTWIND_MINIO_ROOT_USER  $DUSTWIND_MINIO_ROOT_PASSWORD;
      /usr/bin/mc mb aqminio/$AQUARION_MINIO_BUCKET;
      /usr/bin/mc mb glminio/$GREENLAB_MINIO_BUCKET;
      /usr/bin/mc mb tmminio/$TERRAMORF_MINIO_BUCKET;
      /usr/bin/mc mb crminio/$CRYSTALIA_MINIO_BUCKET;
      /usr/bin/mc mb dwminio/$DUSTWIND_MINIO_BUCKET;
      /usr/bin/mc anonymous set public aqminio/$AQUARION_MINIO_BUCKET;
      /usr/bin/mc anonymous set public glminio/$GREENLAB_MINIO_BUCKET;
      /usr/bin/mc anonymous set public tmminio/$TERRAMORF_MINIO_BUCKET;
      /usr/bin/mc anonymous set public crminio/$CRYSTALIA_MINIO_BUCKET;
      /usr/bin/mc anonymous set public dwminio/$DUSTWIND_MINIO_BUCKET;
      exit 0;
      "
  ### EMAIL SERVICES ###
  email-aquarion:
    build:
      context: ./AtomHackFinalEmailService
    restart: always
    ports:
      - "5011:5011"
    environment:
      - EMAIL_SERVICE_HOST=email-aquarion
      - EMAIL_SERVICE_PORT=5011
      - MAIL_SERVICE_SMTP_HOST=${SMTP_HOST}
      - EMAIL_SERVICE_SMTP_PORT=${SMTP_PORT}
      - EMAIL_SERVICE_SMTP_NOREPLY_USERNAME=${SMTP_NOREPLY_USERNAME}
      - EMAIL_SERVICE_SMTP_SUPPORT_USERNAME=${SMTP_SUPPORT_USERNAME}
      - EMAIL_SERVICE_SMTP_NOREPLY_PASSWORD=${SMTP_NOREPLY_PASSWORD}
      - EMAIL_SERVICE_SMTP_SUPPORT_PASSWORD=${SMTP_SUPPORT_PASSWORD}
  email-greenlab:
    restart: always
    build:
      context: ./AtomHackFinalEmailService
    ports:
      - "5012:5012"
    environment:
      - EMAIL_SERVICE_HOST=email-greenlab
      - EMAIL_SERVICE_PORT=5012
      - MAIL_SERVICE_SMTP_HOST=${SMTP_HOST}
      - EMAIL_SERVICE_SMTP_PORT=${SMTP_PORT}
      - EMAIL_SERVICE_SMTP_NOREPLY_USERNAME=${SMTP_NOREPLY_USERNAME}
      - EMAIL_SERVICE_SMTP_SUPPORT_USERNAME=${SMTP_SUPPORT_USERNAME}
      - EMAIL_SERVICE_SMTP_NOREPLY_PASSWORD=${SMTP_NOREPLY_PASSWORD}
      - EMAIL_SERVICE_SMTP_SUPPORT_PASSWORD=${SMTP_SUPPORT_PASSWORD}
  email-terramorf:
    build:
      context: ./AtomHackFinalEmailService
    restart: always
    ports:
      - "5013:5013"
    environment:
      - EMAIL_SERVICE_HOST=email-terramorf
      - EMAIL_SERVICE_PORT=5013
      - MAIL_SERVICE_SMTP_HOST=${SMTP_HOST}
      - EMAIL_SERVICE_SMTP_PORT=${SMTP_PORT}
      - EMAIL_SERVICE_SMTP_NOREPLY_USERNAME=${SMTP_NOREPLY_USERNAME}
      - EMAIL_SERVICE_SMTP_SUPPORT_USERNAME=${SMTP_SUPPORT_USERNAME}
      - EMAIL_SERVICE_SMTP_NOREPLY_PASSWORD=${SMTP_NOREPLY_PASSWORD}
      - EMAIL_SERVICE_SMTP_SUPPORT_PASSWORD=${SMTP_SUPPORT_PASSWORD}
  email-crystalia:
    build:
      context: ./AtomHackFinalEmailService
    restart: always
    ports:
      - "5014:5014"
    environment:
      - EMAIL_SERVICE_HOST=email-crystalia
      - EMAIL_SERVICE_PORT=5014
      - MAIL_SERVICE_SMTP_HOST=${SMTP_HOST}
      - EMAIL_SERVICE_SMTP_PORT=${SMTP_PORT}
      - EMAIL_SERVICE_SMTP_NOREPLY_USERNAME=${SMTP_NOREPLY_USERNAME}
      - EMAIL_SERVICE_SMTP_SUPPORT_USERNAME=${SMTP_SUPPORT_USERNAME}
      - EMAIL_SERVICE_SMTP_NOREPLY_PASSWORD=${SMTP_NOREPLY_PASSWORD}
      - EMAIL_SERVICE_SMTP_SUPPORT_PASSWORD=${SMTP_SUPPORT_PASSWORD}
  email-dustwind:
    build:
      context: ./AtomHackFinalEmailService
    restart: always
    ports:
      - "5015:5015"
    environment:
      - EMAIL_SERVICE_HOST=email-dustwind
      - EMAIL_SERVICE_PORT=5015
      - MAIL_SERVICE_SMTP_HOST=${SMTP_HOST}
      - EMAIL_SERVICE_SMTP_PORT=${SMTP_PORT}
      - EMAIL_SERVICE_SMTP_NOREPLY_USERNAME=${SMTP_NOREPLY_USERNAME}
      - EMAIL_SERVICE_SMTP_SUPPORT_USERNAME=${SMTP_SUPPORT_USERNAME}
      - EMAIL_SERVICE_SMTP_NOREPLY_PASSWORD=${SMTP_NOREPLY_PASSWORD}
      - EMAIL_SERVICE_SMTP_SUPPORT_PASSWORD=${SMTP_SUPPORT_PASSWORD}
  ### BACKENDS ###
  back-aquarion:
    restart: always
    build: 
      context: ./AquarionBackend
      args:
        PORT: 8001
        DATABASE_NAME: //postgres-aquarion:5432/${AQUARION_POSTGRES_DB}
        DATABASE_USER: ${AQUARION_POSTGRES_USER}
        DATABASE_PASSWORD: ${AQUARION_POSTGRES_PASSWORD}
        MINIO_ENDPOINT: ${AQUARION_MINIO_HOST}
        MINIO_ACCESS_KEY: ${AQUARION_MINIO_ROOT_USER}
        MINIO_SECRET_KEY: ${AQUARION_MINIO_ROOT_PASSWORD}
        MINIO_BUCKET: ${AQUARION_MINIO_BUCKET}
        INIT: true
        SERVER_NAME: aquarion
        SECRET: ${JWT_SECRET}
        SUPPORT_URL: http://email-aquarion:5011/api
        KAFKA_SEND_TO_TOPIC: ${TOPIC_1}
        KAFKA_READ_FROM_TOPIC: ${TOPIC_2}
        KAFKA_SERVER: "${HOST_IP}:9092"
    ports:
      - "8001:8001"
    environment:
      PORT: 8001
      DATABASE_NAME: //postgres-aquarion:5432/${AQUARION_POSTGRES_DB}
      DATABASE_USER: ${AQUARION_POSTGRES_USER}
      DATABASE_PASSWORD: ${AQUARION_POSTGRES_PASSWORD}
      MINIO_ENDPOINT: ${AQUARION_MINIO_HOST}
      MINIO_ACCESS_KEY: ${AQUARION_MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${AQUARION_MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${AQUARION_MINIO_BUCKET}
      INIT: true
      SERVER_NAME: aquarion
      SECRET: ${JWT_SECRET}
      SUPPORT_URL: http://email-aquarion:5011/api
      KAFKA_SEND_TO_TOPIC: ${TOPIC_1}
      KAFKA_READ_FROM_TOPIC: ${TOPIC_2}
      KAFKA_SERVER: "${HOST_IP}:9092"
    depends_on:
      - postgres-aquarion
      - email-aquarion
      - minio-aquarion
      - kafka-aquarion
  back-greenlab:
    restart: always
    build: 
      context: ./AquarionBackend
      args:
        PORT: 8002
        DATABASE_NAME: //postgres-greenlab:5432/${GREENLAB_POSTGRES_DB}
        DATABASE_USER: ${GREENLAB_POSTGRES_USER}
        DATABASE_PASSWORD: ${GREENLAB_POSTGRES_PASSWORD}
        MINIO_ENDPOINT: ${GREENLAB_MINIO_HOST}
        MINIO_ACCESS_KEY: ${GREENLAB_MINIO_ROOT_USER}
        MINIO_SECRET_KEY: ${GREENLAB_MINIO_ROOT_PASSWORD}
        MINIO_BUCKET: ${GREENLAB_MINIO_BUCKET}
        INIT: true
        SERVER_NAME: green_maze
        SECRET: ${JWT_SECRET}
        SUPPORT_URL: http://email-greenlab:5012/api
        KAFKA_SEND_TO_TOPIC: ${TOPIC_1}
        KAFKA_READ_FROM_TOPIC: ${TOPIC_2}
        KAFKA_SERVER: "${HOST_IP}:9093"
    ports:
      - "8002:8002"
    environment:
      PORT: 8002
      DATABASE_NAME: //postgres-greenlab:5432/${GREENLAB_POSTGRES_DB}
      DATABASE_USER: ${GREENLAB_POSTGRES_USER}
      DATABASE_PASSWORD: ${GREENLAB_POSTGRES_PASSWORD}
      MINIO_ENDPOINT: ${GREENLAB_MINIO_HOST}
      MINIO_ACCESS_KEY: ${GREENLAB_MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${GREENLAB_MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${GREENLAB_MINIO_BUCKET}
      INIT: true
      SERVER_NAME: green_maze
      SECRET: ${JWT_SECRET}
      SUPPORT_URL: http://email-greenlab:5012/api
      KAFKA_SEND_TO_TOPIC: ${TOPIC_1}
      KAFKA_READ_FROM_TOPIC: ${TOPIC_2}
      KAFKA_SERVER: "${HOST_IP}:9093"
    depends_on:
      - postgres-greenlab
      - email-greenlab
      - minio-greenlab
      - kafka-greenlab
  back-terramorf:
    restart: always
    build: 
      context: ./AquarionBackend
      args:
        PORT: 8003
        DATABASE_NAME: //postgres-terramorf:5432/${TERRAMORF_POSTGRES_DB}
        DATABASE_USER: ${TERRAMORF_POSTGRES_USER}
        DATABASE_PASSWORD: ${TERRAMORF_POSTGRES_PASSWORD}
        MINIO_ENDPOINT: ${TERRAMORF_MINIO_HOST}
        MINIO_ACCESS_KEY: ${TERRAMORF_MINIO_ROOT_USER}
        MINIO_SECRET_KEY: ${TERRAMORF_MINIO_ROOT_PASSWORD}
        MINIO_BUCKET: ${TERRAMORF_MINIO_BUCKET}
        INIT: true
        SERVER_NAME: terramorph
        SECRET: ${JWT_SECRET}
        SUPPORT_URL: http://email-terramorf:5013/api
        KAFKA_SEND_TO_TOPIC: ${TOPIC_1}
        KAFKA_READ_FROM_TOPIC: ${TOPIC_2}
        KAFKA_SERVER: "${HOST_IP}:9094"
    ports:
      - "8003:8003"
    environment:
      PORT: 8003
      DATABASE_NAME: //postgres-terramorf:5432/${TERRAMORF_POSTGRES_DB}
      DATABASE_USER: ${TERRAMORF_POSTGRES_USER}
      DATABASE_PASSWORD: ${TERRAMORF_POSTGRES_PASSWORD}
      MINIO_ENDPOINT: ${TERRAMORF_MINIO_HOST}
      MINIO_ACCESS_KEY: ${TERRAMORF_MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${TERRAMORF_MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${TERRAMORF_MINIO_BUCKET}
      INIT: true
      SERVER_NAME: terramorph
      SECRET: ${JWT_SECRET}
      SUPPORT_URL: http://email-terramorf:5013/api
      KAFKA_SEND_TO_TOPIC: ${TOPIC_1}
      KAFKA_READ_FROM_TOPIC: ${TOPIC_2}
      KAFKA_SERVER: "${HOST_IP}:9094"
    depends_on:
      - postgres-terramorf
      - email-terramorf
      - minio-terramorf
      - kafka-terramorf
  back-crystalia:
    restart: always
    build: 
      context: ./AquarionBackend
      args:
        PORT: 8004
        DATABASE_NAME: //postgres-crystalia:5432/${CRYSTALIA_POSTGRES_DB}
        DATABASE_USER: ${CRYSTALIA_POSTGRES_USER}
        DATABASE_PASSWORD: ${CRYSTALIA_POSTGRES_PASSWORD}
        MINIO_ENDPOINT: ${CRYSTALIA_MINIO_HOST}
        MINIO_ACCESS_KEY: ${CRYSTALIA_MINIO_ROOT_USER}
        MINIO_SECRET_KEY: ${CRYSTALIA_MINIO_ROOT_PASSWORD}
        MINIO_BUCKET: ${CRYSTALIA_MINIO_BUCKET}
        INIT: true
        SERVER_NAME: crystallia
        SECRET: ${JWT_SECRET}
        SUPPORT_URL: http://email-crystalia:5014/api
        KAFKA_SEND_TO_TOPIC: ${TOPIC_1}
        KAFKA_READ_FROM_TOPIC: ${TOPIC_2}
        KAFKA_SERVER: "${HOST_IP}:9095"
    ports:
      - "8004:8004"
    environment:
      PORT: 8004
      DATABASE_NAME: //postgres-crystalia:5432/${CRYSTALIA_POSTGRES_DB}
      DATABASE_USER: ${CRYSTALIA_POSTGRES_USER}
      DATABASE_PASSWORD: ${CRYSTALIA_POSTGRES_PASSWORD}
      MINIO_ENDPOINT: ${CRYSTALIA_MINIO_HOST}
      MINIO_ACCESS_KEY: ${CRYSTALIA_MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${CRYSTALIA_MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${CRYSTALIA_MINIO_BUCKET}
      INIT: true
      SERVER_NAME: crystallia
      SECRET: ${JWT_SECRET}
      SUPPORT_URL: http://email-crystalia:5014/api
      KAFKA_SEND_TO_TOPIC: ${TOPIC_1}
      KAFKA_READ_FROM_TOPIC: ${TOPIC_2} 
      KAFKA_SERVER: "${HOST_IP}:9095"
    depends_on:
      - postgres-crystalia
      - email-crystalia
      - minio-crystalia
      - kafka-crystalia
  back-dustwind:
    restart: always
    build: 
      context: ./AquarionBackend
      args:
        PORT: 8005
        DATABASE_NAME: //postgres-dustwind:5432/${DUSTWIND_POSTGRES_DB}
        DATABASE_USER: ${DUSTWIND_POSTGRES_USER}
        DATABASE_PASSWORD: ${DUSTWIND_POSTGRES_PASSWORD}
        MINIO_ENDPOINT: ${DUSTWIND_MINIO_HOST}
        MINIO_ACCESS_KEY: ${DUSTWIND_MINIO_ROOT_USER}
        MINIO_SECRET_KEY: ${DUSTWIND_MINIO_ROOT_PASSWORD}
        MINIO_BUCKET: ${DUSTWIND_MINIO_BUCKET}
        INIT: true
        SERVER_NAME: desert_whirlwind
        SECRET: ${JWT_SECRET}
        SUPPORT_URL: http://email-dustwind:5015/api
        KAFKA_SEND_TO_TOPIC: ${TOPIC_1}
        KAFKA_READ_FROM_TOPIC: ${TOPIC_2}
        KAFKA_SERVER: "${HOST_IP}:9096"
    environment:
      PORT: 8005
      DATABASE_NAME: //postgres-dustwind:5432/${DUSTWIND_POSTGRES_DB}
      DATABASE_USER: ${DUSTWIND_POSTGRES_USER}
      DATABASE_PASSWORD: ${DUSTWIND_POSTGRES_PASSWORD}
      MINIO_ENDPOINT: ${DUSTWIND_MINIO_HOST}
      MINIO_ACCESS_KEY: ${DUSTWIND_MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${DUSTWIND_MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${DUSTWIND_MINIO_BUCKET}
      INIT: true
      SERVER_NAME: desert_whirlwind
      SECRET: ${JWT_SECRET}
      SUPPORT_URL: http://email-dustwind:5015/api
      KAFKA_SEND_TO_TOPIC: ${TOPIC_1}
      KAFKA_READ_FROM_TOPIC: ${TOPIC_2}
      KAFKA_SERVER: "${HOST_IP}:9096"
    ports:
      - "8005:8005"
    depends_on:
      - postgres-dustwind
      - email-dustwind
      - minio-dustwind
      - kafka-dustwind
  ### SENDER SERVICE ###
  sender-aquarion:
    restart: always
    build:
      context: ./AtomHack-Final-senderServer
    environment:
      AI_KAFKA: "${HOST_IP}:9092"
      AI_KAFKA_CONSUMER_TOPIC: "${TOPIC_1}"
      AI_KAFKA_PRODUCER_TOPIC: "${TOPIC_2}"
      AI_BASE_URL: "http://ml:8080"
      BACKEND_BASE_URL: "http://back-aquarion:8001"
    depends_on:
      - ml
      - kafka-aquarion
  sender-greenlab:
    restart: always
    build:
      context: ./AtomHack-Final-senderServer
    environment:
      AI_KAFKA: "${HOST_IP}:9093"
      AI_KAFKA_CONSUMER_TOPIC: "${TOPIC_1}"
      AI_KAFKA_PRODUCER_TOPIC: "${TOPIC_2}"
      AI_BASE_URL: "http://ml:8080"
      BACKEND_BASE_URL: "http://back-aquarion:8002"
    depends_on:
      - ml
      - kafka-greenlab
  sender-terramorf:
    restart: always
    build:
      context: ./AtomHack-Final-senderServer
    environment:
      AI_KAFKA: "${HOST_IP}:9094"
      AI_KAFKA_CONSUMER_TOPIC: "${TOPIC_1}"
      AI_KAFKA_PRODUCER_TOPIC: "${TOPIC_2}"
      AI_BASE_URL: "http://ml:8080"
      BACKEND_BASE_URL: "http://back-aquarion:8003"
    depends_on:
      - ml
      - kafka-terramorf
  sender-crystalia:
    restart: always
    build:
      context: ./AtomHack-Final-senderServer
    environment:
      AI_KAFKA: "${HOST_IP}:9095"
      AI_KAFKA_CONSUMER_TOPIC: "${TOPIC_1}"
      AI_KAFKA_PRODUCER_TOPIC: "${TOPIC_2}"
      AI_BASE_URL: "http://ml:8080"
      BACKEND_BASE_URL: "http://back-aquarion:8004"
    depends_on:
      - ml
      - kafka-crystalia
  sender-dustwind:
    restart: always
    build:
      context: ./AtomHack-Final-senderServer
    environment:
      AI_KAFKA: "${HOST_IP}:9096"
      AI_KAFKA_CONSUMER_TOPIC: "${TOPIC_1}"
      AI_KAFKA_PRODUCER_TOPIC: "${TOPIC_2}"
      AI_BASE_URL: "http://ml:8080"
      BACKEND_BASE_URL: "http://back-aquarion:8005"
    depends_on:
      - ml
      - kafka-dustwind
  ### MLs ###
  ml:
    restart: always
    image: botaihack
    ports:
      - "8080:8080"
  ### AUTH ###
  auth-app:
    restart: always
    build:
      context: ./AtomHackFinalAuthService
    ports:
      - "${AUTH_SERVER_PORT}:${AUTH_SERVER_PORT}"
    environment:
      - HTTP_SERVER_PORT=${AUTH_SERVER_PORT}
      - LOG_LEVEL=${LOG_LEVEL}
      - FRONTEND_SERVER_ADDR=${FRONTEND_SERVER_ADDR}
      - REDIS_PASSWORD=${AUTH_REDIS_PASSWORD}
      - REDIS_HOST=${AUTH_REDIS_HOST}
      - REDIS_PORT=${AUTH_REDIS_PORT}
      - POSTGRES_PASSWORD=${AUTH_POSTGRES_PASSWORD}
      - POSTGRES_USER=${AUTH_POSTGRES_USER}
      - POSTGRES_DB=${AUTH_POSTGRES_DB}
      - POSTGRES_HOST=${AUTH_POSTGRES_HOST}
      - POSTGRES_PORT=${AUTH_POSTGRES_PORT}
      - SWAGGER_ADDR=${AUTH_DEPLOYED_AS}
      - EMAIL_SERVICE_SMTP_HOST=${SMTP_HOST}
      - EMAIL_SERVICE_SMTP_PORT=${SMTP_PORT}
      - EMAIL_SERVICE_SMTP_NO_REPLY_USERNAME=${SMTP_NOREPLY_USERNAME}
      - EMAIL_SERVICE_SMTP_NO_REPLY_PASSWORD=${SMTP_NOREPLY_PASSWORD}
    depends_on:
      - auth-postgres
      - auth-redis
  auth-postgres:
    image: postgres:15.3-alpine
    restart: always
    volumes:
      - auth-db:/var/lib/postgresql/data
      - ./AtomHackFinalAuthService/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_USER: ${AUTH_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AUTH_POSTGRES_PASSWORD}
      POSTGRES_DB: ${AUTH_POSTGRES_DB}
  auth-redis:
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - auth-redis:/data
    command: redis-server --save 20 1 --loglevel warning --requirepass ${AUTH_REDIS_PASSWORD}
  ### MAIN FRONTEND ###
  main-app:
    restart: always
    build:
      context: ./AtomHack-Final-frontend
    ports:
      - "3000:5173"
  
